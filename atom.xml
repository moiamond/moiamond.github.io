<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>moiamond&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://moiamond.github.io/"/>
  <updated>2018-09-13T03:22:59.930Z</updated>
  <id>http://moiamond.github.io/</id>
  
  <author>
    <name>moiamond</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vagrant 1.8.4 跟 Virtualbox 5.1 水土不合</title>
    <link href="http://moiamond.github.io/post/Vagrant-1-8-4-%E8%B7%9F-Virtualbox-5-1-%E6%B0%B4%E5%9C%9F%E4%B8%8D%E5%90%88/"/>
    <id>http://moiamond.github.io/post/Vagrant-1-8-4-跟-Virtualbox-5-1-水土不合/</id>
    <published>2016-07-14T15:20:06.000Z</published>
    <updated>2018-09-13T03:22:59.930Z</updated>
    
    <content type="html"><![CDATA[<p>跟上頭反應了好久，老闆終於丟了一台空機器給我當測試機。馬上先安裝 Ubuntu trusty LTS 作業系統，並且裝了最新版的 <code>Virtualbox 5.1</code> 和 <code>vagrant 1.8.4</code>。</p><p>結果執行 <code>vagrant up</code> 時，噴出一堆錯誤：</p><blockquote><p>If you believe you already have a provider available, make sure it<br>is properly installed and configured. You can see more details about<br>why a particular provider isn’t working by forcing usage with<br><code>vagrant up --provider=PROVIDER</code>, which should give you a more specific<br>error message for that particular provider.</p></blockquote><p>真是看到鬼了，照著錯誤訊息加了 <code>--provider=virtualbox</code> 還是看到一樣的錯誤訊息。</p><p>不得已只好打開 <code>debug</code> 的 log，看看有沒有有用的資訊</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VAGRANT_LOG=debug vagrant up --provider=virtualbox</span><br></pre></td></tr></table></figure><p>在眾多的訊息中，終於發現關鍵的資訊，原來<code>1.8.4</code>只支援到<code>5.0</code></p><blockquote><p>Vagrant has detected that you have a version of VirtualBox installed<br>that is not supported by this version of Vagrant. Please install one of<br>the supported versions listed below to use Vagrant:</p><p>4.0, 4.1, 4.2, 4.3, 5.0</p></blockquote><p>後來去爬了<code>vagrant</code>的 <a href="https://github.com/mitchellh/vagrant/issues" target="_blank" rel="noopener">issues</a>，此問題 <a href="https://github.com/mitchellh/vagrant/issues/7411" target="_blank" rel="noopener">#7411</a> 已經有不少討論了。<br>也剛好有人<a href="https://github.com/mitchellh/vagrant/pull/7574/files" target="_blank" rel="noopener">PR</a>了解法。這個問題預計會修在<code>1.8.5</code>，不過也不知道什麼時候才會出。我又不想裝回舊的<code>virtualbox</code>。索性照著此<a href="https://github.com/mitchellh/vagrant/pull/7574/files" target="_blank" rel="noopener">PR</a>的改法，修改<code>vagrant</code>資料夾下的檔案。</p><p>問題就順利解決了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;跟上頭反應了好久，老闆終於丟了一台空機器給我當測試機。馬上先安裝 Ubuntu trusty LTS 作業系統，並且裝了最新版的 &lt;code&gt;Virtualbox 5.1&lt;/code&gt; 和 &lt;code&gt;vagrant 1.8.4&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;結果執行 &lt;c
      
    
    </summary>
    
    
      <category term="vagrant" scheme="http://moiamond.github.io/tags/vagrant/"/>
    
      <category term="virtualbox" scheme="http://moiamond.github.io/tags/virtualbox/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 快速架設 RTMP 串流平台</title>
    <link href="http://moiamond.github.io/post/%E4%BD%BF%E7%94%A8-Docker-%E5%BF%AB%E9%80%9F%E6%9E%B6%E8%A8%AD-RTMP-%E4%B8%B2%E6%B5%81%E5%B9%B3%E5%8F%B0/"/>
    <id>http://moiamond.github.io/post/使用-Docker-快速架設-RTMP-串流平台/</id>
    <published>2016-07-04T07:04:12.000Z</published>
    <updated>2018-09-13T03:22:04.148Z</updated>
    
    <content type="html"><![CDATA[<p>為了在開發機器上測試<strong>RTMP</strong>串流，研究了一下目前可行的方案，最後選定用Nginx+RTMP module+Docker來方便的達到此需求。</p><p>過程大概就是下面四個步驟:</p><ol><li>安裝所有能編譯<strong>Nginx</strong>的相關套件</li><li>到<strong>Nginx</strong>的官網抓取最新的原始碼</li><li>Git clone 最新的 <a href="https://github.com/arut/nginx-rtmp-module.git" target="_blank" rel="noopener">nginx-rtmp-module</a></li><li>開始編譯<strong>nginx</strong>原始碼 (要打開打開<strong>nginx-rtmp-module</strong>編譯選項)</li></ol><p>為了之後可以很方便的無腦啟動，因此整理成了<code>Dockerfile</code>，詳細的步驟可以<a href="https://github.com/moiamond/dockerfiles/tree/master/nginx-rtmp" target="_blank" rel="noopener">在此</a>找到</p><p>只要執行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build.sh</span><br></pre></td></tr></table></figure><p>就會啟動一個名為<code>streamserver</code>﹑支援RTMP協定的伺服器</p><p>查看RTMP的統計資料</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://docker:8800/stat</span><br></pre></td></tr></table></figure><p>串流位址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtmp://docker:1935/live/mystream</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;為了在開發機器上測試&lt;strong&gt;RTMP&lt;/strong&gt;串流，研究了一下目前可行的方案，最後選定用Nginx+RTMP module+Docker來方便的達到此需求。&lt;/p&gt;
&lt;p&gt;過程大概就是下面四個步驟:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安裝所有能編譯&lt;strong&gt;N
      
    
    </summary>
    
    
      <category term="docker" scheme="http://moiamond.github.io/tags/docker/"/>
    
      <category term="streaming" scheme="http://moiamond.github.io/tags/streaming/"/>
    
  </entry>
  
  <entry>
    <title>解決 Plex Media Server 讀不到 Aperture 的問題</title>
    <link href="http://moiamond.github.io/post/%E8%A7%A3%E6%B1%BA-Plex-Media-Server-%E8%AE%80%E4%B8%8D%E5%88%B0-Aperture-%E7%9A%84%E5%95%8F%E9%A1%8C/"/>
    <id>http://moiamond.github.io/post/解決-Plex-Media-Server-讀不到-Aperture-的問題/</id>
    <published>2014-08-03T15:02:25.000Z</published>
    <updated>2018-09-13T03:06:41.637Z</updated>
    
    <content type="html"><![CDATA[<img src="/post/解決-Plex-Media-Server-讀不到-Aperture-的問題/title.png" title="[Plex Channels]"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 一陣子了，主要是拿來當家裡的影音中心。<br>因為我使用 <strong>Aperture</strong> 來管理所有的照片，因此 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 透過 <strong>Aperture</strong> 來分享照片。</p><p>但是常常會發生 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 讀不到 <strong>Aperture</strong> 的情形。<br>使用上就非常的不方便，常常要重新開啟 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 讓一切正常。<br>後來發現只要我在 <strong>Aperture</strong> 裡面做一些操作之後，<a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 就讀不到 <strong>Aperture</strong> 了。</p><p>原來 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 是透過 Aperture Library XML (ApertureData.xml) 來讀取 <strong>Aperture</strong> 的資料。<br>只要這個檔案有改變，<a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 就讀不到了。</p><p>爬了一下網路的文章，滿多人都有遇到這個問題，解決方法不外乎就是重開 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> XD<br>既然沒有好的解決方法，只好就此症狀對症下藥了。</p><p>想法非常的簡單，就是自動偵測 ApertureData.xml 有沒有更新，如果有就重新開啟 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a>。</p><p>在 Mac OS 下，其實可以透過內建的 <strong>launchd</strong> 做到這些事。</p><h1 id="進入正題"><a href="#進入正題" class="headerlink" title="進入正題"></a>進入正題</h1><p>這邊我分成兩個部分：</p><ul><li>如果 ApertureData.xml 有更新則砍掉 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 這隻程式</li><li><a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 要一直保持啟動。</li></ul><p><code>lauchd</code> 會載入存放在 <code>~/Library/LaunchAgents/</code> 的 <code>plist</code></p><p>接下來詳細的說明各個 <code>plist</code> 的內容：</p><h2 id="監控-ApertureData-xml"><a href="#監控-ApertureData-xml" class="headerlink" title="監控 ApertureData.xml"></a>監控 <code>ApertureData.xml</code></h2><blockquote><p>如果 ApertureData.xml 有更新，就執行會砍掉 Plex Media Server 這隻程式的 script</p></blockquote><p>新增 <code>com.plex.killme.plist</code> 內容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN</span></span><br><span class="line"><span class="meta">http://www.apple.com/DTDs/PropertyList-1.0.dtd&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.plex.killme<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/userA/script/kill-plex<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">string</span>&gt;</span>restart<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>WatchPaths<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/userA/Pictures/Aperture Library.aplibrary/ApertureData.xml<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新增 kill-plex.sh 內容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">sleep 60</span><br><span class="line">killall "Plex Media Server”</span><br></pre></td></tr></table></figure><p>當所監控的檔案有更新的時候，<code>launchd</code> 就會去執行 <code>kill-plex.sh</code>。<br><code>kill-plex.sh</code> 一開始會先等待60秒之後再砍掉 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a>。<br>為什麼要先等待60秒？其實這是實驗結果導向。<br>因為 <code>launchd</code> 會一直保持 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 在執行的狀態，<br>只要一發現 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 沒有在執行，就會馬上重新啟動它。<br>如果在 ApertureData.xml 正在更新的當下，馬上砍掉 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 再重新啟動，<br>常常也會發生看不到 <strong>Aperture</strong> 的情況。<br>因此就先等60秒，看起來一切就正常了。</p><h2 id="Keep-alive"><a href="#Keep-alive" class="headerlink" title="Keep alive"></a>Keep alive</h2><blockquote><p><a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 要一直保持啟動</p></blockquote><p>新增 <code>com.plex.keepalive.plist</code> 內容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.plex.keepalive<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">key</span>&gt;</span>Program<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Applications/Plex Media Server.app/Contents/MacOS/Plex Media Server<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="準備就緒"><a href="#準備就緒" class="headerlink" title="準備就緒"></a>準備就緒</h2><p>當新增這兩個 <code>plist</code> 到 <code>~/Library/LaunchAgents/</code> 裡，如何馬上啟用？<br>可以執行以下的指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">launchctl load ~/Library/LaunchAgents/com.plex.killme.plist</span><br><span class="line">launchctl load ~/Library/LaunchAgents/com.plex.keepalive.plist</span><br></pre></td></tr></table></figure><p>以後不管 <strong>Aperture</strong> 做了什麼操作，我不用再手動重新啟動 <a href="https://plex.tv" target="_blank" rel="noopener">Plex Media Server</a> 了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/post/解決-Plex-Media-Server-讀不到-Aperture-的問題/title.png&quot; title=&quot;[Plex Channels]&quot;&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="雜七雜八" scheme="http://moiamond.github.io/categories/%E9%9B%9C%E4%B8%83%E9%9B%9C%E5%85%AB/"/>
    
    
      <category term="plex" scheme="http://moiamond.github.io/tags/plex/"/>
    
      <category term="aperture" scheme="http://moiamond.github.io/tags/aperture/"/>
    
  </entry>
  
  <entry>
    <title>Doxygen 初體驗</title>
    <link href="http://moiamond.github.io/post/Doxygen-%E5%88%9D%E9%AB%94%E9%A9%97/"/>
    <id>http://moiamond.github.io/post/Doxygen-初體驗/</id>
    <published>2008-04-26T13:38:52.000Z</published>
    <updated>2018-09-13T03:22:46.775Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.stack.nl/~dimitri/doxygen/index.html" target="_blank" rel="noopener">Doxygen</a>是產生程式碼說明文件的工具，支援的語言也非常多。使用的方式也很簡單，在 Windows 系統下首先安裝它的<a href="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.5.5-setup.exe" target="_blank" rel="noopener">工具程式</a>。<br>接下來最重要的部份則是，你要如何告訴 doxygen 一些規則，好讓它能夠自動幫你產生文件。</p><p>以下是 <a href="http://www.stack.nl/~dimitri/doxygen/docblocks.html#pythonblocks" target="_blank" rel="noopener">doxygen 說明文件的一個範例</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## @package pyexample</span></span><br><span class="line"><span class="comment">#  Documentation for this module.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  More details.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Documentation for a function.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  More details.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Documentation for a class.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  More details.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyClass</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## The constructor.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._memVar = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">## Documentation for a method.</span></span><br><span class="line">    <span class="comment">#  @param self The object pointer.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PyMethod</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## A class variable.</span></span><br><span class="line">    classVar = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">## @var _memVar</span></span><br><span class="line">    <span class="comment">#  a member variable</span></span><br></pre></td></tr></table></figure><p>最後再用<a href="http://www.stack.nl/~dimitri/doxygen/doxywizard_usage.html" target="_blank" rel="noopener">Doxywizard</a>就可以很簡單的產生說明文件了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.stack.nl/~dimitri/doxygen/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Doxygen&lt;/a&gt;是產生程式碼說明文件的工具，支援的語言也非常多。使用的方式也很簡單，在 W
      
    
    </summary>
    
      <category term="programming" scheme="http://moiamond.github.io/categories/programming/"/>
    
    
      <category term="doxygen" scheme="http://moiamond.github.io/tags/doxygen/"/>
    
      <category term="python" scheme="http://moiamond.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在 Linux 上寫你的 Daemon</title>
    <link href="http://moiamond.github.io/post/%E5%9C%A8-Linux-%E4%B8%8A%E5%AF%AB%E4%BD%A0%E7%9A%84-Daemon/"/>
    <id>http://moiamond.github.io/post/在-Linux-上寫你的-Daemon/</id>
    <published>2002-02-21T16:53:08.000Z</published>
    <updated>2018-09-13T03:05:22.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-deamon"><a href="#Linux-deamon" class="headerlink" title="Linux deamon"></a>Linux deamon</h1><p>最近研究了一下如何寫<code>Linux</code>的<code>daemon</code>(相當於<code>Windows</code>的 service)。首先找到了<a href="http://www.netzmafia.de/skripten/unix/linux-daemon-howto.html" target="_blank" rel="noopener">Linux Daemon Writing HOWTO</a>。這篇文章寫的相當的清楚，基本上只要依照以下的原則就可以寫出基本的骨架。</p><ul><li>呼叫 <code>Fork()</code> 並且讓父程序結束</li><li>改變<code>umask</code>為<code>0</code></li><li>建立log</li><li>呼叫<code>setsid()</code>建立一個新的作業階段</li><li>改變目前的<code>工作路徑</code>到一個安全的地方，也就是說永遠都會存在的路徑。例如<code>根目錄</code>就是一個很好的選擇</li><li>關閉沒有必要的<code>檔案描述詞</code></li><li>你這隻 daemon 所要做的事</li></ul><p>另外要寫<code>daemon</code>有一點一定要注意，那就是盡可能使用防禦式的寫法來寫程式碼。因為<code>daemon</code>不像一般的程式，如果當掉了，是很難去追原因的。所以錯誤檢查要做好，並且一定要養成輸出<code>log</code>的習慣。</p><h1 id="用-Python-來實作"><a href="#用-Python-來實作" class="headerlink" title="用 Python 來實作"></a>用 Python 來實作</h1><p>如果你會寫<code>Python</code>，那麼也許你可以參考<a href="http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/" target="_blank" rel="noopener">A simple unix/linux daemon in Python</a>的作法。如果你仔細看一下他的程式碼，你會發現他的 <em>Daemon</em> 這個 <em>class</em> 也是依照上面的原則寫出來的。</p><p>有了一個<code>daemon</code>骨架之後，接下來就看有什麼需求。譬如，如果想監控某個目錄下，檔案的新增，刪減或修改，可以搭配 <a href="http://www.ibm.com/developerworks/linux/library/l-ubuntu-inotify/index.html" target="_blank" rel="noopener">inotify</a>。Python 也有相對應的模組 <a href="http://pyinotify.sourceforge.net/" target="_blank" rel="noopener">pyinotify</a>並將所監控的訊息紀錄在一個檔案。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-deamon&quot;&gt;&lt;a href=&quot;#Linux-deamon&quot; class=&quot;headerlink&quot; title=&quot;Linux deamon&quot;&gt;&lt;/a&gt;Linux deamon&lt;/h1&gt;&lt;p&gt;最近研究了一下如何寫&lt;code&gt;Linux&lt;/code&gt;的&lt;
      
    
    </summary>
    
      <category term="programming" scheme="http://moiamond.github.io/categories/programming/"/>
    
    
      <category term="deamon" scheme="http://moiamond.github.io/tags/deamon/"/>
    
  </entry>
  
</feed>
